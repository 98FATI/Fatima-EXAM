@page "/books"
@inject HttpClient Http
@using BookBlazor.Models

<h3>üìö Liste des Livres</h3>

@if (books == null)
{
    <p>Chargement...</p>
}
else
{
    <ul>
        @foreach (var book in books)
        {
            <li>
                <strong>@book.Title</strong> par @book.Author
                <button @onclick="() => EditBook(book)">‚úè</button>
                <button @onclick="() => DeleteBook(book.Id)">‚ùå</button>
            </li>
        }
    </ul>
}

<h4>@(editing ? "‚úè Modifier le livre" : "‚ûï Ajouter un livre")</h4>

<input placeholder="Titre" @bind="newBook.Title" />
<input placeholder="Auteur" @bind="newBook.Author" />
<button @onclick="SaveBook">@((editing ? "Mettre √† jour" : "Ajouter"))</button>

@code {
    List<Book>? books;
    Book newBook = new();
    bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    async Task LoadBooks()
    {
        books = await Http.GetFromJsonAsync<List<Book>>("books");
    }

    async Task SaveBook()
    {
        if (editing)
        {
            await Http.PutAsJsonAsync($"books/{newBook.Id}", newBook);
            editing = false;
        }
        else
        {
            await Http.PostAsJsonAsync("books", newBook);
        }

        newBook = new Book();
        await LoadBooks();
    }

    void EditBook(Book book)
    {
        newBook = new Book
        {
            Id = book.Id,
            Title = book.Title,
            Author = book.Author
        };
        editing = true;
    }

    async Task DeleteBook(int id)
    {
        await Http.DeleteAsync($"books/{id}");
        await LoadBooks();
    }
}